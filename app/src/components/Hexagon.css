.hexagon {
  width: 100px;
  height: 115.47px; /* width * sqrt(3)/2 * 1.15 (approx for better spacing) -- actually height should be width * (sqrt(3)/2) for a regular hexagon if width is point-to-point, or width / (sqrt(3)/2) if width is flat-side to flat-side. Let's use a common clip-path generator ratio.
  A common pattern for clip-path uses height = width * 0.866 (sqrt(3)/2). So for width 100, height is 86.6px.
  Let's try: width: 100px, height: 86.6px.
  The text needs to fit, so we might need a slightly taller hexagon or adjust font sizes.
  Let's use a well-known generator: https://bennettfeely.com/clippy/
  It suggests for a hexagon: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%)
  This path assumes the box itself provides the dimensions.
  */
  width: 100px;
  height: 86.6px; /* sqrt(3)/2 * 100px */
  background-color: #4a5568; /* Muted blue-gray, good with dark theme */
  color: #e2e8f0; /* Light text for contrast */
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  margin: 5px; /* Spacing around hexagons */
  clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
  filter: drop-shadow(0px 1px 3px rgba(0,0,0,0.4)); /* Slightly softer shadow */
  box-sizing: border-box;
  transition: transform 0.2s ease-out, background-color 0.2s ease; /* For hover effects */
}

.hexagon:hover {
  background-color: #5a6578; /* Slightly lighter on hover */
  transform: scale(1.05); /* Subtle zoom effect */
}

.hexagon-operator {
  font-size: 1.2em;
  font-weight: bold;
  margin-right: 5px;
}

.hexagon-number {
  font-size: 1em;
}
